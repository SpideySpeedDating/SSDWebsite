<templates>
<body id="congrats"><div  class="flex-container flex-column flex-justify-space-between"><nav><img  id="top-left-image" width="150px" height="150px" src="../img/grumpyPurp_spider.png" alt="Top Left Image"/><a  href="#"><button  id="back-to-home">BACK TO HOME</button></a></nav><main  id="congrats-page"><h1>Congrats!</h1><p>You found your soulmate!!</p><p>Here is their personal information so you can find them:</p><p>Email Address: <strong><span  id="email">example@example.com</span></strong></p></main><footer></footer></div></body>
<body id="dating-info"><header><h2>just a few more questions!</h2></header><main  id="dating-info" class="flex-container flex-column flex-center-column"><div  id="alex-pic"><img  width="350px" height="350px" src="../img/alex_pic.png"/><div><p><strong>Alexander Kruger</strong></p><p>Junior Software Engineer, Trusted Advisor, Just A Great Guy</p></div></div><p>We searched for a person who'd have the ability to determine 8 questions whose answers would help one find their soulmate. BBD's Alexander Kruger was the man for this job! He specially curated these intensive, mind opening &amp; soul searching questions just for SpideySpeedDating. Are you ready to dive deeper into yourself and find your one true love?</p></main><footer><a  href="#"><button>BACK TO HOME</button></a><a  href="#question"><button>let's hear your answers!</button></a></footer></body>
<body id="dating-screen"><header><h2>Round <span  id="round-id">1</span>:</h2></header><main  id="dating-page" class="flex-container flex-column"><span  id="dating-question" class="outlined-box">Why did my HTML not load correctly?
    </span><span  id="answer-bubble" class="outlined-box">Hello :)
    </span><div  id="spider-container"><p  class="flex-container flex-column flex-center-column">:( Sorry No one is participating
      </p></div></main><script  type="module">import {DataService} from "./lib/data-service.js";
    import {Utils} from "./lib/utils.js";
    
    let questions = window.questions || await DataService.getQuestions()
    let userAnswers;
    let questionDisplay = document.getElementById("dating-question");
    let questionNumberDisplay = document.getElementById("round-id");
    let questionNumber = 0;
    let eatenUsers = 0;
    let container = document.getElementById("spider-container");
    let complete = false;
    const requestOptions = {
      method: 'GET',
      headers: {
        'Authorization': localStorage.getItem("jwt")
      }
    };
    function EatBug(clickedId) {
      eatenUsers += 1;
      var element = document.getElementById(clickedId);
      console.log("You clicked on", clickedId);
      element.style.setProperty("display", "none");
      questionNumber += 1;
      updateQuestion();
      if(questionNumber === questions.length - 1 || (userAnswers.length - eatenUsers &lt; 1)) {
        let buttonNumber = clickedId.split("-")[1];
        var answerElement = document.getElementById("answer-bubble");
        answerElement.textContent = "You found: " + userAnswers[buttonNumber].email;
        console.log(answerElement.textContent);
        complete = true;
      }
    }
    function removeRemainingSpiders(choosenId){
      for(let child of container.children) {
        if(child.id === choosenId) continue;
        else child.style.setProperty("display", "none");
      }
    }
    function SetSpiderAnswer(spiderId){
      const buttonNumber = spiderId.split("-")[1];
      let spidersAnswer = userAnswers[buttonNumber].answers[questionNumber];
      var answerElement = document.getElementById("answer-bubble");
      answerElement.textContent = spidersAnswer;
    }
    function HideAnswer(){
      if (!complete) {
        var answerElement = document.getElementById("answer-bubble");
        answerElement.textContent = "";
      }
    }
    async function GetUserAnswers(){
      fetch(`${Utils.apiURL()}/api/answers/random`, requestOptions)
      .then(response =&gt; {
        if (!response.ok) {
          throw new Error(response);
        }

        return response.json();
      })
      .then(responseBody =&gt; {
        userAnswers = responseBody;
      })
      .catch(error =&gt; {
        console.error('There was a problem with the fetch operation:', error);
      });
    }
    function updateQuestion(){
      questionDisplay.textContent = questions[questionNumber].question;
      questionNumberDisplay.textContent = questionNumber + 1;
    }
    async function initialize(){
      updateQuestion();
      // Load users with their answers
      await GetUserAnswers();
      if (!Utils.isNullOrUndefined(userAnswers) &amp;&amp; userAnswers.length &gt; 0) {
        let removeChildren = true;
        for(let idx=0; idx &lt; userAnswers.length; idx++) {
          if (removeChildren) {
            Utils.removeElementIdChildren(container);
            removeChildren = false;
          }
          container.appendChild(createSpiderButton(idx));
        }
      }
      // Foreach answer insert template
    }
    function createSpiderButton(idx) {
      let button = document.createElement("button");
      button.id = `spider-${idx}`;
      button.class="spider-button";
      button.addEventListener("click", (e) =&gt; {EatBug(`${button.id}`)});
      button.addEventListener("mouseover", (e) =&gt; {SetSpiderAnswer(`${button.id}`)});
      button.addEventListener("mouseout", HideAnswer);
      button.appendChild(createSpiderImage());
      return button
    }
    function createSpiderImage() {
      let img = document.createElement("img");
      img.src="../img/greyGreen_spider.png";
      img.width="100";
      img.height="100";
      return img;
    }
    initialize();
  </script><footer><button>BACK TO HOME</button></footer></body>
<body id="default-404"><h1>Default-404! (whoopsie daisyüï∏Ô∏è)</h1></body>
<body id="index"><div  class="flex-container flex-column flex-justify-space-between"><nav  id="home-page-nav"><img  id="logo" src="img/logo.png" width="115" height="102"/><div  class="links"><a  href="#" id="github-login"><button>Login with GitHub</button></a><a  href="#" id="logout" style="display: none;"><button>Logout</button></a></div></nav><main  id="home-page" class="flex-container flex-column flex-justify-space-between"><h1>Welcome to Spidey Spee<span  class="hanging-spider">d</span>Dating!</h1><span  id="index-message" style="display: none;"></span></main><footer><a  href="#info">Not sure how it works? Click here!</a><nav  id="main-page-logged-in-links" style="display: none;" class="flex-container"><a  href="#intro-questions"><button>User Questions</button></a><a  href="#question"><button>Dating Questions</button></a></nav></footer></div><script  type="module">import {Utils} from "/lib/utils.js";

    async function navigateToGithubLogin(event) {
      event.preventDefault();
      let messageElement = document.getElementById("index-message");
      fetch(Utils.apiURL() + "/auth/generate_link").then((response) =&gt; {
        if (!response.ok) {
          messageElement.style.display = "block";
          messageElement.textContent = "Error from API! " + response.status + ": " + response.statusText;
        } else {
          response.json().then((data) =&gt; {
            messageElement.style.display = "none";
            window.location.href = data.url;
          }).catch(() =&gt; {
            messageElement.style.display = "block";
            messageElement.textContent = "JSON response from server was bad!";
          });
        }
      }).catch((err) =&gt; {
        messageElement.style.display = "block";
        messageElement.textContent = "Could not contact server!";
      });
    }

    let github_login = document.getElementById("github-login");
    github_login.addEventListener('click', navigateToGithubLogin);
  </script><script  type="module">import {Utils} from "/lib/utils.js";
    let jwt = localStorage.getItem("jwt")
    if (jwt != null) {
      let options = {
        headers: {
          "Authorization" : jwt
        }
      }
      fetch(Utils.apiURL() + "/auth/verify", options).then((response) =&gt; {
        if (response.ok) {
          let github_login = document.getElementById("github-login");
          github_login.style.display = "none";
          let main_page_logged_in_links = document.getElementById("main-page-logged-in-links");
          main_page_logged_in_links.style.display = "flex";
          let logout = document.getElementById("logout");
          logout.style.display = "block";
        }
      });
    }
  </script><script  type="module">function logoutUser() {
      localStorage.removeItem("jwt");
      let github_login = document.getElementById("github-login");
      let main_page_logged_in_links = document.getElementById("main-page-logged-in-links");
      github_login.style.display = "block";
      logout.style.display = "none";
      main_page_logged_in_links.style.display = "none";
    }

    let logout = document.getElementById("logout");
    logout.addEventListener('click', logoutUser);
  </script><script  type="module">let searchParams = new URLSearchParams(window.location.search);
    if (searchParams.size != 0) {
      window.location.search = "";
    }
  </script><script  type="module">import { Utils } from "/lib/utils.js";
    let indexMessage = localStorage.getItem(Utils.indexMessage);
    if (indexMessage != null) {
      let messageElement = document.getElementById("index-message");
      messageElement.style.display = "block";
      messageElement.textContent = indexMessage;
      localStorage.removeItem(Utils.indexMessage);
    }
  </script></body>
<body id="info"><header><h2>Welcome to our dating platform!</h2></header><main  id="info-page" class="flex-container flex-column flex-center-column"><p>Here's a quick guide on how everything works:</p><ol><li>Create Your Profile: First things first, set up your profile! Tell us about yourself, and answer some fun questions. Once you're done, hit that "Create Profile" button.</li><li>Get Ready to Date: Once your profile is set, you're ready to dive into the dating world! Click on the "Start Dating" button to begin.</li><li>Meet the "Insects": In the dating game, you'll find yourself in a web with other users represented as insects. Don't worry, it's all in good fun! Each "round" will present a question, and you'll see the answers from the other users.</li><li>Navigate the Web: The spider, that's you, will eliminate one insect at a time based on their answers. It's kind of like a game of elimination! üï∑Ô∏è Bye-bye bugs!</li><li>Find Your Match: As the rounds progress, users will be eliminated until there's only one left standing. The spider, that's still you, will then get the remaining user's info, like email address.</li></ol><p>And that's it! It's a fun way to meet new people and see who you vibe with. So go ahead, give it a try and see who you catch in your web! üï∏Ô∏è</p></main><footer><a  href="#"><button>BACK TO HOME</button></a></footer></body>
<body id="intro-questions"><header><h2>Tell us about yourself!</h2></header><main  id="intro-questions" class="flex-container flex-column flex-center-column"><form  id="intro-questions-form"><span  id="users-name-box"><label  for="users-name">What's your name?</label><input  id="users-name" required="true"/></span><span  id="users-age-box"><label  for="users-age">How old are you?</label><input  id="users-age" type="number" min="18" required="true"/></span><span  id="users-gender-box"><label  for="users-gender">How do you identify your gender?</label><select  id="users-gender"><option  value="male">Male</option><option  value="female">Female</option><option  value="other">Other</option></select></span><span  id="users-orientation-box"><label  for="users-orientation">What's your sexual orientation?</label><select  id="users-orientation"><option  value="straight">Straight</option><option  value="gay">Gay</option><option  value="other">Other</option></select></span><button  type="submit">Submit</button></form></main><footer><a  href="#"><button>Back to Home</button></a></footer><script  type="module">import { Utils } from "/lib/utils.js";

    let options = {
        headers: {
          Authorization: localStorage.getItem("jwt")
        }
      }
    fetch(Utils.apiURL() + "/api/users/", options).then((res) =&gt; {
      if (res.ok) {
        res.json().then((data) =&gt; {
          console.log(data);
          document.getElementById("users-name").value = data["username"] || "";
          document.getElementById("users-age").value = data["age"] || "";
          document.getElementById("users-gender").value = data["gender"] || "male";
          document.getElementById("users-orientation").value = data["sexuality"] || "straight";
        }).catch((err) =&gt; {
          displayMessage("Failed to parse JSON response");
          console.log(err);
        });
      } else {
        displayMessage("Failed to load user data. Try loggin in again.");
      }
    }).catch((err) =&gt; {
      displayMessage("Couldn't reach API while retrieving user data!\n" + err);
    });

    function submitForm(e) {

      let usersName = document.getElementById("users-name").value;
      let usersAge = document.getElementById("users-age").value;
      let usersGender = document.getElementById("users-gender").value;
      let usersOrientation = document.getElementById("users-orientation").value;

      let options = {
        method: "PUT",
        body: JSON.stringify({
            "username": usersName,
            "gender": usersGender,
            "sexuality": usersOrientation,
            "age": usersAge
        }),
        headers: {
          "Content-type": "application/json; charset=UTF-8",
          Authorization: localStorage.getItem("jwt")
        }
      }
      fetch(Utils.apiURL() + "/api/users/update", options).then((res) =&gt; {
        if (res.ok) {
          displayMessage("Success! On to the next page you go!");
          window.location.href = "#dating-info";
        } else {
          displayMessage("Failed! Here's what we know: (intentionally left blank)");
        }
      }).catch((err) =&gt; {
        displayMessage("Big boy error!\n" + err);
      });
    }

    function displayMessage(msg) {
      let messageElement = document.getElementById("message");
      if (messageElement == null) {
        const mainBody = document.getElementById("intro-questions");
        messageElement = document.createElement("p");
        messageElement.id = "message";
        mainBody.prepend(messageElement);
      }
      messageElement.textContent = msg;
    }
    
    let form = document.getElementById("intro-questions-form");
    form.addEventListener('submit', submitForm);
  </script></body>
<body id="login"><main  id="login-page" class="flex-container flex-column flex-center-column"><h1>Login Page!</h1><p  id="login-message">You will be redirected when you have been authenticated!</p><a  href="#"><button  id="back-to-home">Back to Home</button></a></main><script  type="module">import { Utils } from "/lib/utils.js";

    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get("code");
    let options = {
      headers: {
        "Access-Control-Allow-Origin": window.location.origin
      }
    }

    fetch(Utils.apiURL() + "/api/status", options)
      .then(response =&gt; {
        console.log(response);
      })
      .catch(error =&gt; console.error("Error fetching API:", error));

    let authOptions = {
      headers: {
        "Access-Control-Allow-Origin": window.location.origin,
        "Authorization": code
      }
    }
    let loginMessage = document.getElementById("login-message");
    fetch(Utils.apiURL() + "/auth", authOptions)
        .then(response =&gt; {
            if (!response.ok) {
                loginMessage.textContent = "Failed to login! Please try again.";
            } else {
                response.json().then((data) =&gt; {
                    console.log(data);
                    localStorage.setItem("jwt", data["jwt"]);
                    let hashLocation = ""; 
                    if (!Utils.isNullOrUndefined(localStorage.getItem(Utils.loginRedirect))) {
                      let htmlId = localStorage.getItem(Utils.loginRedirect);
                      localStorage.removeItem(Utils.loginRedirect);
                      localStorage.removeItem(Utils.indexMessage);
                      hashLocation = htmlId;
                    }
                    window.location.href = "#" + hashLocation;
                })
            }
        })
        .catch(error =&gt; {
          loginMessage.textContent = "Failed to reach API server, please contact the developers";
        });
    

    let backToHome = document.getElementById("back-to-home");
    backToHome.addEventListener('click', () =&gt; {
      window.location.hash = "";
    })
  </script></body>
<body id="question"><header><h2>Question <span  id="question-id">1</span>:</h2></header><main  id="question-page" class="flex-container flex-column flex-justify-center"><form  id="question-form" class="flex-container flex-column flex-justify-center"><label  id="question-label" for="question-id">Were you breastfed as a child?</label><textarea  id="question-input" maxlength="150"> </textarea><button  id="question-form-button" type="submit">Next Question</button></form></main><footer><a  href="#"><button>BACK TO HOME</button></a><button  id="question-footer-button">NEXT QUESTION</button></footer><script  type="module">import {Utils} from "./lib/utils.js";
    import {Router} from "./lib/router.js";
    import {DataService} from "/lib/data-service.js";
    function resizeTextArea() {
      let textarea = document.getElementById("question-input");
      textarea.style.height = "";
      textarea.style.height = textarea.scrollHeight + 2 + "px";
    }
    async function getQuestions() {
      if (!await Router.isValidSession()) {
        Router.loginRedirect("question", "Session expired, please login");
      } else {
        if (window.questions === undefined || window.questions === null) {
          window.questions = DataService.getQuestions();
          window.currQuestionIdx = 0;
        }
        renderCurrentQuestion();
      }
    }
    async function updateToNextQuestion(e) {
      e.preventDefault();
      let answer = textarea.value;
      if (answer === "" || answer === undefined) return;
      let shouldUpdateQuestion = await postAnswer(answer);
    }
    function updateQuestion() {
      if (currQuestionIdx &lt; questions.length - 1) {
        currQuestionIdx += 1;
        renderCurrentQuestion();
      } else {
        window.location.href = "#dating-screen";
      }
    }
    function renderCurrentQuestion() {
      let questionLabel = document.getElementById("question-label");
      questionLabel.textContent = window.questions[window.currQuestionIdx].question;
      questionId.textContent = currQuestionIdx + 1;
      textarea.value = "";
    }
    async function postAnswer(answer) {
      await fetch(`${Utils.apiURL()}/api/answers/create`, {
        method: "POST",
        body: JSON.stringify({
          question_id: questions[window.currQuestionIdx].question_id,
          answer: answer
      }),
        headers: {
          "Content-type": "application/json; charset=UTF-8",
          "Authorization": localStorage.getItem("jwt")
        }
      }).then((response) =&gt; { 
        if (response.status === 200) updateQuestion()
        else alert("Failed to post answer");
      });
    }
    let textarea = document.getElementById("question-input");
    textarea.addEventListener("input", resizeTextArea);
    window.addEventListener("resize", resizeTextArea);
    
    let questionId = document.getElementById("question-id");
    
    let form = document.getElementById("question-form");
    form.addEventListener("submit", updateToNextQuestion);
    
    let nextButton = document.getElementById("question-footer-button");
    nextButton.addEventListener("click", updateToNextQuestion)
    
    await getQuestions()

  </script></body>
</templates>